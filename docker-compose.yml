version: '3.8'

services:
  # 'app' es el nombre de tu servicio
  app:
    # Construye la imagen usando el Dockerfile en el directorio actual
    build: .
    
    # Reinicia siempre si falla
    restart: unless-stopped
    
    # Define un volumen para persistir la base de datos SQLite.
    # Coolify manejará automáticamente la creación de este volumen.
    volumes:
      - mihorario_db:/app/db.sqlite3
      
    # Comando para ejecutar al iniciar el contenedor.
    # 1. Aplica las migraciones de la base de datos.
    # 2. Recolecta los archivos estáticos (para WhiteNoise).
    # 3. Inicia el servidor de producción Gunicorn.
    command: >
      sh -c "python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn horario.wsgi:application --bind 0.0.0.0:8000"

    # Define cómo Coolify debe verificar que tu app está saludable
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s # Dale 5 segundos para que empiece a arrancar

    # Configuración de puertos (Coolify la gestionará, pero es buena práctica)
    ports:
      - "8000:8000"

# Declara el volumen que usaremos para la base de datos
volumes:
  mihorario_db:
    # Dejarlo vacío permite que Docker (y Coolify) usen el driver por defecto